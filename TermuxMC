#!/bin/python3
# pip3 install yaspin InquirerPy
import os, time, readline
from InquirerPy import inquirer
from yaspin import yaspin
import urllib.request
from yaspin.spinners import Spinners
from json import loads

def MoziallaUserAgent():
    opener = urllib.request.build_opener()
    opener.addheaders = [('User-Agent', 'Mozilla/5.0 (platform; rv:geckoversion) Gecko/geckotrail Firefox/firefoxversion')]
    urllib.request.install_opener(opener)

@yaspin(Spinners.growHorizontal, "[ Getting Versions ]")
def GetMohistVer():
    MoziallaUserAgent()
    versions_raw = urllib.request.urlopen("https://mohistmc.com/api/v2/projects/mohist").read()
    versions = loads(versions_raw)["versions"]
    urllib.request.urlcleanup()
    return list(reversed(versions))

@yaspin(Spinners.growHorizontal, "[ Getting Available Builds ]")
def GetMohistBuild(ver):
    MoziallaUserAgent()
    build_raw = urllib.request.urlopen(f"https://mohistmc.com/api/v2/projects/mohist/{ver}/builds").read()
    builds = loads(build_raw)
    buildsDict = {}
    for buildsList in list(reversed(builds["builds"])):
        buildsDict[buildsList["number"]] = buildsList["url"]
    urllib.request.urlcleanup()
    return buildsDict

@yaspin(Spinners.growHorizontal, "[ Getting Versions ]")
def GetVanilla():
    versions_raw = urllib.request.urlopen("https://launchermeta.mojang.com/mc/game/version_manifest.json").read()
    versions = loads(versions_raw)["versions"]
    
    versions_dict = {}

    for version_info in filter(lambda x: x["type"] == "release", versions):
        download = urllib.request.urlopen(version_info["url"]).read()
        url = loads(download)["downloads"]["server"]["url"]
        release = version_info["id"] 
        versions_dict[release] = url
        if release == "1.2.5": # The servers are good until this versions
            break
    return versions_dict

@yaspin(Spinners.growHorizontal, "[ Getting Versions ]")
def GetFabricVer():
    versions_raw = urllib.request.urlopen("https://meta.fabricmc.net/v2/versions").read()
    versions = loads(versions_raw)["game"]
    listVer = []

    for version_info in filter(lambda x: x["stable"] == True, versions):
        listVer.append(version_info["version"])
    return listVer

@yaspin(Spinners.growHorizontal, "[ Getting Available Loaders ]")
def GetFabricLoader(ver):
    loader_raw = urllib.request.urlopen(f"https://meta.fabricmc.net/v2/versions/loader/{ver}").read()
    loaders = loads(loader_raw)
    loadersList = []
    for loader_ver_raw in loaders:
        loader_ver = loader_ver_raw["loader"]["version"]
        loadersList.append(loader_ver)
        if loader_ver == "0.12.0":
            break
    return loadersList

@yaspin(Spinners.growHorizontal, "[ Getting Versions ]")
def GetPaperVer():
    versions_raw = urllib.request.urlopen("https://api.papermc.io/v2/projects/paper/").read()
    versions = loads(versions_raw)["versions"]
    listVer = []

    for version_info in versions:
        if version_info != "1.13-pre7":
            listVer.append(version_info)
    return list(reversed(listVer))

@yaspin(Spinners.growHorizontal, "[ Getting Available Builds ]")
def GetPaperBuild(ver):
    build_raw = urllib.request.urlopen(f"https://api.papermc.io/v2/projects/paper/versions/{ver}/builds/").read()
    builds = loads(build_raw)["builds"]
    buildsList = []
    for build_ver_raw in list(reversed(builds)):
        buildsList.append(build_ver_raw["build"])
    return buildsList

def Setup():
    with yaspin(Spinners.earth, text="[ Updating repos ]") as sp:
        os.system("pkg update -y 1> /dev/null 2> /dev/null")
    
    with yaspin(Spinners.moon, text="[ Installing dependences ]") as sp:
        os.system("pkg install -y openjdk-17 wget 1> /dev/null 2> /dev/null")

def Ram():
    ram = os.popen("free -h | awk '/^Mem:/{print $2}'").readlines()[0].strip()[:-2]
    ramAllocation = []
    for i in range(1, round(float(ram))+1):
        ramAllocation.append(f"{i}G")
    
    RamSel = inquirer.select(
        message="How many GB of ram you'll use?",
        choices=ramAllocation,
    ).execute()

    return RamSel

def Folder():
    home = os.environ["HOME"]

    if not os.path.isdir(f"{home}/MinecraftServers"):
        os.mkdir(f"{home}/MinecraftServers")
    
    result = inquirer.text(
            message="Name:",
            validate=lambda result: len(result) > 0 and not "/" in result and not "\\" in result and not " " in result and not os.path.isdir(f"{home}/MinecraftServers/{result}/"),
            invalid_message="Input cannot be empty and can't contain spaces, '/' & '\\', and can't be the same!",
    ).execute()
        
    os.mkdir(f"{home}/MinecraftServers/{result}")
        
    return f"{home}/MinecraftServers/{result}/"

def CreateMethod():
    folder = Folder()
    ram = Ram()
    def CreateFolder(paper=False, jar=""):        
        with open(folder + "eula.txt", "w") as file:
            file.write("eula=true")
        with open(folder + "run.sh", "w") as file:
            if paper:
                file.write(f"java -Xms{ram} -Xmx{ram} -DPaper.IgnoreJavaVersion=true -XX:+UseG1GC -XX:+ParallelRefProcEnabled -XX:MaxGCPauseMillis=200 -XX:+UnlockExperimentalVMOptions -XX:+DisableExplicitGC -XX:+AlwaysPreTouch -XX:G1NewSizePercent=30 -XX:G1MaxNewSizePercent=40 -XX:G1HeapRegionSize=8M -XX:G1ReservePercent=20 -XX:G1HeapWastePercent=5 -XX:G1MixedGCCountTarget=4 -XX:InitiatingHeapOccupancyPercent=15 -XX:G1MixedGCLiveThresholdPercent=90 -XX:G1RSetUpdatingPauseTimePercent=5 -XX:SurvivorRatio=32 -XX:+PerfDisableSharedMem -XX:MaxTenuringThreshold=1 -Dusing.aikars.flags=https://mcflags.emc.gs -Daikars.new.flags=true -jar {folder}{jar}")
            else:
                file.write(f"java -Xms{ram} -Xmx{ram} -jar {folder}{jar}")

    Server = inquirer.select(
        message="What server type you'll use?",
        choices=["Fabric", "Paper", "Vanilla", "Mohist"],
    ).execute()

    if Server == "Vanilla":
        Versions = GetVanilla()
        Version = inquirer.select(
            message="What version you want?",
            choices=list(Versions.keys()),
        ).execute()
        
        with yaspin(text=f"[ Downloading Minecraft {Version} ]") as sp:
            urllib.request.urlretrieve(Versions[Version], folder + "server.jar")

        CreateFolder(jar="server.jar")
        
    elif Server == "Fabric":
        Versions = GetFabricVer()
        Fersion = inquirer.select(
            message="What version you want?",
            choices=Versions,
        ).execute()
        
        Loader = GetFabricLoader(Fersion)

        Foader = inquirer.select(
            message="What loader version you'll use??",
            choices=Loader,
        ).execute()

        with yaspin(text=f"[ Downloading Minecraft {Fersion} ]") as sp:
            urllib.request.urlretrieve(f"https://meta.fabricmc.net/v2/versions/loader/{Fersion}/{Foader}/1.0.0/server/jar", folder + "fabric.jar")
        
        CreateFolder(jar="fabric.jar")
        
    elif Server == "Paper":
        Versions = GetPaperVer()
        Persion = inquirer.select(
            message="What version you want?",
            choices=Versions,
        ).execute()
        Builds = GetPaperBuild(Persion)
        Build = inquirer.select(
            message="What build version you'll use?",
            choices=Builds,
        ).execute()

        with yaspin(text=f"[ Downloading Minecraft {Persion} ]") as sp:
            DownloadRaw = urllib.request.urlopen(f"https://api.papermc.io/v2/projects/paper/versions/{Persion}/builds/{Build}/").read()
            Download = loads(DownloadRaw)["downloads"]["application"]["name"]
            urllib.request.urlretrieve(f"https://api.papermc.io/v2/projects/paper/versions/{Persion}/builds/{Build}/downloads/{Download}", folder + "paper.jar")

        CreateFolder(paper=True, jar="paper.jar")
    elif Server == "Mohist":
        Versions = GetMohistVer()

        Mersion = inquirer.select(
            message="What version you want?",
            choices=Versions,
        ).execute()
        Builds = GetMohistBuild(Mersion)
        Build = inquirer.select(
            message="What build version you'll use?",
            choices=list(Builds.keys()),
        ).execute()
        with yaspin(text=f"[ Downloading Minecraft {Mersion} ]") as sp:
            MoziallaUserAgent()
            urllib.request.urlretrieve(Builds[Build], folder + "mohist.jar")
            urllib.request.urlcleanup()
        
        CreateFolder(jar="mohist.jar")

def StartMethod():
    home = os.environ["HOME"]
    servers = os.listdir(f"{home}/MinecraftServers")
    servers.append("Exit")
    Server = inquirer.select(
            message="Select a server to run",
            choices=list(servers),
    ).execute()

    if Server != "Exit":
        os.chdir(f"{home}/MinecraftServers/{Server}")
        os.system("bash run.sh")
        
def RemoveMethod():
    home = os.environ["HOME"]
    servers = os.listdir(f"{home}/MinecraftServers")
    servers.extend(["All", "Exit"])
    Server = inquirer.select(
            message="Select a server to remove",
            choices=list(servers),
    ).execute()
    
    if Server != "Exit":
        os.system(f"rm -rf '{home}/MinecraftServers/{Server}'")
        if Server == "All":
            os.system(f"rm -rf '{home}/MinecraftServers/*'")

 
def Method():
    MethodSel = inquirer.select(
            message="What do you want to do?",
            choices=["Create", "Start", "Remove", "Exit"],
    ).execute()

    if MethodSel == "Create": 
        CreateMethod()
        Method()
    if MethodSel == "Start":
        StartMethod()
        Method()
    if MethodSel == "Remove":
        RemoveMethod()
        Method()
    if MethodSel == "Exit":
        exit()

if __name__ == "__main__":
    if not os.path.isdir(f"{os.environ['HOME']}/MinecraftServers"): 
        Setup()
    Method()
